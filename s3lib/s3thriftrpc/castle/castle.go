// Autogenerated by Thrift Compiler (1.0.0-dev)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package castle

import (
	"bytes"
	"context"
	"reflect"
	"database/sql/driver"
	"errors"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

type ClientRole int64
const (
  ClientRole_PRODUCER ClientRole = 0
  ClientRole_CONSUMER ClientRole = 1
  ClientRole_PUSH_CONSUMER ClientRole = 2
)

func (p ClientRole) String() string {
  switch p {
  case ClientRole_PRODUCER: return "PRODUCER"
  case ClientRole_CONSUMER: return "CONSUMER"
  case ClientRole_PUSH_CONSUMER: return "PUSH_CONSUMER"
  }
  return "<UNSET>"
}

func ClientRoleFromString(s string) (ClientRole, error) {
  switch s {
  case "PRODUCER": return ClientRole_PRODUCER, nil 
  case "CONSUMER": return ClientRole_CONSUMER, nil 
  case "PUSH_CONSUMER": return ClientRole_PUSH_CONSUMER, nil 
  }
  return ClientRole(0), fmt.Errorf("not a valid ClientRole string")
}


func ClientRolePtr(v ClientRole) *ClientRole { return &v }

func (p ClientRole) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ClientRole) UnmarshalText(text []byte) error {
q, err := ClientRoleFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ClientRole) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ClientRole(v)
return nil
}

func (p * ClientRole) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type Status int64
const (
  Status_ALIVE Status = 0
  Status_DEAD Status = 1
)

func (p Status) String() string {
  switch p {
  case Status_ALIVE: return "ALIVE"
  case Status_DEAD: return "DEAD"
  }
  return "<UNSET>"
}

func StatusFromString(s string) (Status, error) {
  switch s {
  case "ALIVE": return Status_ALIVE, nil 
  case "DEAD": return Status_DEAD, nil 
  }
  return Status(0), fmt.Errorf("not a valid Status string")
}


func StatusPtr(v Status) *Status { return &v }

func (p Status) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *Status) UnmarshalText(text []byte) error {
q, err := StatusFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *Status) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = Status(v)
return nil
}

func (p * Status) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type ErrorCode int64
const (
  ErrorCode_OK ErrorCode = 0
  ErrorCode_NO_CHANGE ErrorCode = 1
  ErrorCode_ILLEGAL_ROLE ErrorCode = 2
  ErrorCode_ILLEGAL_APPKEY ErrorCode = 3
  ErrorCode_ILLEGAL_TOPIC ErrorCode = 4
  ErrorCode_ILLEGAL_GROUP ErrorCode = 5
  ErrorCode_REGISTER_FAIL ErrorCode = 6
  ErrorCode_ILLEGAL_PARAM ErrorCode = 7
  ErrorCode_ILLEGAL_CLIENT_INFO ErrorCode = 8
  ErrorCode_ILLEGAL_CLIENT_CONFIG ErrorCode = 9
  ErrorCode_ILLEGAL_PRODUCER_CONFIG ErrorCode = 10
  ErrorCode_ILLEGAL_CONSUMER_CONFIG ErrorCode = 11
  ErrorCode_NO_VERSION_FOUND ErrorCode = 12
  ErrorCode_NO_TOPIC_CONFIG_FOUND ErrorCode = 13
  ErrorCode_NO_BROKER_FOUND ErrorCode = 14
  ErrorCode_NO_CLUSTER_FOUND ErrorCode = 15
  ErrorCode_NO_PARTITION_FOUND ErrorCode = 16
  ErrorCode_NO_PARTITION_ASSIGN ErrorCode = 17
  ErrorCode_ILLEGAL_CLIENT_TYPE ErrorCode = 18
  ErrorCode_OTHER_ERROR ErrorCode = 100
)

func (p ErrorCode) String() string {
  switch p {
  case ErrorCode_OK: return "OK"
  case ErrorCode_NO_CHANGE: return "NO_CHANGE"
  case ErrorCode_ILLEGAL_ROLE: return "ILLEGAL_ROLE"
  case ErrorCode_ILLEGAL_APPKEY: return "ILLEGAL_APPKEY"
  case ErrorCode_ILLEGAL_TOPIC: return "ILLEGAL_TOPIC"
  case ErrorCode_ILLEGAL_GROUP: return "ILLEGAL_GROUP"
  case ErrorCode_REGISTER_FAIL: return "REGISTER_FAIL"
  case ErrorCode_ILLEGAL_PARAM: return "ILLEGAL_PARAM"
  case ErrorCode_ILLEGAL_CLIENT_INFO: return "ILLEGAL_CLIENT_INFO"
  case ErrorCode_ILLEGAL_CLIENT_CONFIG: return "ILLEGAL_CLIENT_CONFIG"
  case ErrorCode_ILLEGAL_PRODUCER_CONFIG: return "ILLEGAL_PRODUCER_CONFIG"
  case ErrorCode_ILLEGAL_CONSUMER_CONFIG: return "ILLEGAL_CONSUMER_CONFIG"
  case ErrorCode_NO_VERSION_FOUND: return "NO_VERSION_FOUND"
  case ErrorCode_NO_TOPIC_CONFIG_FOUND: return "NO_TOPIC_CONFIG_FOUND"
  case ErrorCode_NO_BROKER_FOUND: return "NO_BROKER_FOUND"
  case ErrorCode_NO_CLUSTER_FOUND: return "NO_CLUSTER_FOUND"
  case ErrorCode_NO_PARTITION_FOUND: return "NO_PARTITION_FOUND"
  case ErrorCode_NO_PARTITION_ASSIGN: return "NO_PARTITION_ASSIGN"
  case ErrorCode_ILLEGAL_CLIENT_TYPE: return "ILLEGAL_CLIENT_TYPE"
  case ErrorCode_OTHER_ERROR: return "OTHER_ERROR"
  }
  return "<UNSET>"
}

func ErrorCodeFromString(s string) (ErrorCode, error) {
  switch s {
  case "OK": return ErrorCode_OK, nil 
  case "NO_CHANGE": return ErrorCode_NO_CHANGE, nil 
  case "ILLEGAL_ROLE": return ErrorCode_ILLEGAL_ROLE, nil 
  case "ILLEGAL_APPKEY": return ErrorCode_ILLEGAL_APPKEY, nil 
  case "ILLEGAL_TOPIC": return ErrorCode_ILLEGAL_TOPIC, nil 
  case "ILLEGAL_GROUP": return ErrorCode_ILLEGAL_GROUP, nil 
  case "REGISTER_FAIL": return ErrorCode_REGISTER_FAIL, nil 
  case "ILLEGAL_PARAM": return ErrorCode_ILLEGAL_PARAM, nil 
  case "ILLEGAL_CLIENT_INFO": return ErrorCode_ILLEGAL_CLIENT_INFO, nil 
  case "ILLEGAL_CLIENT_CONFIG": return ErrorCode_ILLEGAL_CLIENT_CONFIG, nil 
  case "ILLEGAL_PRODUCER_CONFIG": return ErrorCode_ILLEGAL_PRODUCER_CONFIG, nil 
  case "ILLEGAL_CONSUMER_CONFIG": return ErrorCode_ILLEGAL_CONSUMER_CONFIG, nil 
  case "NO_VERSION_FOUND": return ErrorCode_NO_VERSION_FOUND, nil 
  case "NO_TOPIC_CONFIG_FOUND": return ErrorCode_NO_TOPIC_CONFIG_FOUND, nil 
  case "NO_BROKER_FOUND": return ErrorCode_NO_BROKER_FOUND, nil 
  case "NO_CLUSTER_FOUND": return ErrorCode_NO_CLUSTER_FOUND, nil 
  case "NO_PARTITION_FOUND": return ErrorCode_NO_PARTITION_FOUND, nil 
  case "NO_PARTITION_ASSIGN": return ErrorCode_NO_PARTITION_ASSIGN, nil 
  case "ILLEGAL_CLIENT_TYPE": return ErrorCode_ILLEGAL_CLIENT_TYPE, nil 
  case "OTHER_ERROR": return ErrorCode_OTHER_ERROR, nil 
  }
  return ErrorCode(0), fmt.Errorf("not a valid ErrorCode string")
}


func ErrorCodePtr(v ErrorCode) *ErrorCode { return &v }

func (p ErrorCode) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ErrorCode) UnmarshalText(text []byte) error {
q, err := ErrorCodeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ErrorCode) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ErrorCode(v)
return nil
}

func (p * ErrorCode) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// Attributes:
//  - Version
//  - ClientRole
//  - HeartbeatTime
//  - ClientInfo
//  - ClientConfig
//  - Status
type HeartBeatRequest struct {
  Version int32 `thrift:"version,1" db:"version" json:"version"`
  ClientRole ClientRole `thrift:"clientRole,2" db:"clientRole" json:"clientRole"`
  HeartbeatTime int32 `thrift:"heartbeatTime,3" db:"heartbeatTime" json:"heartbeatTime"`
  ClientInfo *ClientInfo `thrift:"clientInfo,4" db:"clientInfo" json:"clientInfo"`
  ClientConfig *ClientConfig `thrift:"clientConfig,5" db:"clientConfig" json:"clientConfig"`
  Status Status `thrift:"status,6" db:"status" json:"status"`
}

func NewHeartBeatRequest() *HeartBeatRequest {
  return &HeartBeatRequest{}
}


func (p *HeartBeatRequest) GetVersion() int32 {
  return p.Version
}

func (p *HeartBeatRequest) GetClientRole() ClientRole {
  return p.ClientRole
}

func (p *HeartBeatRequest) GetHeartbeatTime() int32 {
  return p.HeartbeatTime
}
var HeartBeatRequest_ClientInfo_DEFAULT *ClientInfo
func (p *HeartBeatRequest) GetClientInfo() *ClientInfo {
  if !p.IsSetClientInfo() {
    return HeartBeatRequest_ClientInfo_DEFAULT
  }
return p.ClientInfo
}
var HeartBeatRequest_ClientConfig_DEFAULT *ClientConfig
func (p *HeartBeatRequest) GetClientConfig() *ClientConfig {
  if !p.IsSetClientConfig() {
    return HeartBeatRequest_ClientConfig_DEFAULT
  }
return p.ClientConfig
}

func (p *HeartBeatRequest) GetStatus() Status {
  return p.Status
}
func (p *HeartBeatRequest) IsSetClientInfo() bool {
  return p.ClientInfo != nil
}

func (p *HeartBeatRequest) IsSetClientConfig() bool {
  return p.ClientConfig != nil
}

func (p *HeartBeatRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *HeartBeatRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Version = v
}
  return nil
}

func (p *HeartBeatRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := ClientRole(v)
  p.ClientRole = temp
}
  return nil
}

func (p *HeartBeatRequest)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.HeartbeatTime = v
}
  return nil
}

func (p *HeartBeatRequest)  ReadField4(iprot thrift.TProtocol) error {
  p.ClientInfo = &ClientInfo{}
  if err := p.ClientInfo.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ClientInfo), err)
  }
  return nil
}

func (p *HeartBeatRequest)  ReadField5(iprot thrift.TProtocol) error {
  p.ClientConfig = &ClientConfig{}
  if err := p.ClientConfig.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ClientConfig), err)
  }
  return nil
}

func (p *HeartBeatRequest)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  temp := Status(v)
  p.Status = temp
}
  return nil
}

func (p *HeartBeatRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("HeartBeatRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HeartBeatRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("version", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:version: ", p), err) }
  if err := oprot.WriteI32(int32(p.Version)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.version (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:version: ", p), err) }
  return err
}

func (p *HeartBeatRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("clientRole", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:clientRole: ", p), err) }
  if err := oprot.WriteI32(int32(p.ClientRole)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.clientRole (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:clientRole: ", p), err) }
  return err
}

func (p *HeartBeatRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("heartbeatTime", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:heartbeatTime: ", p), err) }
  if err := oprot.WriteI32(int32(p.HeartbeatTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.heartbeatTime (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:heartbeatTime: ", p), err) }
  return err
}

func (p *HeartBeatRequest) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("clientInfo", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:clientInfo: ", p), err) }
  if err := p.ClientInfo.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ClientInfo), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:clientInfo: ", p), err) }
  return err
}

func (p *HeartBeatRequest) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("clientConfig", thrift.STRUCT, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:clientConfig: ", p), err) }
  if err := p.ClientConfig.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ClientConfig), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:clientConfig: ", p), err) }
  return err
}

func (p *HeartBeatRequest) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:status: ", p), err) }
  if err := oprot.WriteI32(int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:status: ", p), err) }
  return err
}

func (p *HeartBeatRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HeartBeatRequest(%+v)", *p)
}

// Attributes:
//  - Version
//  - Hostname
//  - IP
//  - Appkey
type ClientInfo struct {
  Version string `thrift:"version,1" db:"version" json:"version"`
  Hostname string `thrift:"hostname,2" db:"hostname" json:"hostname"`
  IP string `thrift:"ip,3" db:"ip" json:"ip"`
  Appkey string `thrift:"appkey,4" db:"appkey" json:"appkey,omitempty"`
}

func NewClientInfo() *ClientInfo {
  return &ClientInfo{}
}


func (p *ClientInfo) GetVersion() string {
  return p.Version
}

func (p *ClientInfo) GetHostname() string {
  return p.Hostname
}

func (p *ClientInfo) GetIP() string {
  return p.IP
}
var ClientInfo_Appkey_DEFAULT string = ""

func (p *ClientInfo) GetAppkey() string {
  return p.Appkey
}
func (p *ClientInfo) IsSetAppkey() bool {
  return p.Appkey != ClientInfo_Appkey_DEFAULT
}

func (p *ClientInfo) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ClientInfo)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Version = v
}
  return nil
}

func (p *ClientInfo)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Hostname = v
}
  return nil
}

func (p *ClientInfo)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.IP = v
}
  return nil
}

func (p *ClientInfo)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Appkey = v
}
  return nil
}

func (p *ClientInfo) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ClientInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ClientInfo) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("version", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:version: ", p), err) }
  if err := oprot.WriteString(string(p.Version)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.version (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:version: ", p), err) }
  return err
}

func (p *ClientInfo) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("hostname", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:hostname: ", p), err) }
  if err := oprot.WriteString(string(p.Hostname)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hostname (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:hostname: ", p), err) }
  return err
}

func (p *ClientInfo) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ip", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ip: ", p), err) }
  if err := oprot.WriteString(string(p.IP)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ip (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ip: ", p), err) }
  return err
}

func (p *ClientInfo) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetAppkey() {
    if err := oprot.WriteFieldBegin("appkey", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:appkey: ", p), err) }
    if err := oprot.WriteString(string(p.Appkey)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.appkey (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:appkey: ", p), err) }
  }
  return err
}

func (p *ClientInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ClientInfo(%+v)", *p)
}

// Attributes:
//  - ProducerConfig
//  - ConsumerConfig
//  - ClientCommonConfig
type ClientConfig struct {
  ProducerConfig *ProducerConfig `thrift:"producerConfig,1" db:"producerConfig" json:"producerConfig"`
  ConsumerConfig *ConsumerConfig `thrift:"consumerConfig,2" db:"consumerConfig" json:"consumerConfig"`
  ClientCommonConfig *ClientCommonConfig `thrift:"clientCommonConfig,3" db:"clientCommonConfig" json:"clientCommonConfig,omitempty"`
}

func NewClientConfig() *ClientConfig {
  return &ClientConfig{}
}

var ClientConfig_ProducerConfig_DEFAULT *ProducerConfig
func (p *ClientConfig) GetProducerConfig() *ProducerConfig {
  if !p.IsSetProducerConfig() {
    return ClientConfig_ProducerConfig_DEFAULT
  }
return p.ProducerConfig
}
var ClientConfig_ConsumerConfig_DEFAULT *ConsumerConfig
func (p *ClientConfig) GetConsumerConfig() *ConsumerConfig {
  if !p.IsSetConsumerConfig() {
    return ClientConfig_ConsumerConfig_DEFAULT
  }
return p.ConsumerConfig
}
var ClientConfig_ClientCommonConfig_DEFAULT *ClientCommonConfig
func (p *ClientConfig) GetClientCommonConfig() *ClientCommonConfig {
  if !p.IsSetClientCommonConfig() {
    return ClientConfig_ClientCommonConfig_DEFAULT
  }
return p.ClientCommonConfig
}
func (p *ClientConfig) IsSetProducerConfig() bool {
  return p.ProducerConfig != nil
}

func (p *ClientConfig) IsSetConsumerConfig() bool {
  return p.ConsumerConfig != nil
}

func (p *ClientConfig) IsSetClientCommonConfig() bool {
  return p.ClientCommonConfig != nil
}

func (p *ClientConfig) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ClientConfig)  ReadField1(iprot thrift.TProtocol) error {
  p.ProducerConfig = &ProducerConfig{}
  if err := p.ProducerConfig.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ProducerConfig), err)
  }
  return nil
}

func (p *ClientConfig)  ReadField2(iprot thrift.TProtocol) error {
  p.ConsumerConfig = &ConsumerConfig{}
  if err := p.ConsumerConfig.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ConsumerConfig), err)
  }
  return nil
}

func (p *ClientConfig)  ReadField3(iprot thrift.TProtocol) error {
  p.ClientCommonConfig = &ClientCommonConfig{}
  if err := p.ClientCommonConfig.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ClientCommonConfig), err)
  }
  return nil
}

func (p *ClientConfig) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ClientConfig"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ClientConfig) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("producerConfig", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:producerConfig: ", p), err) }
  if err := p.ProducerConfig.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ProducerConfig), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:producerConfig: ", p), err) }
  return err
}

func (p *ClientConfig) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("consumerConfig", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:consumerConfig: ", p), err) }
  if err := p.ConsumerConfig.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ConsumerConfig), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:consumerConfig: ", p), err) }
  return err
}

func (p *ClientConfig) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetClientCommonConfig() {
    if err := oprot.WriteFieldBegin("clientCommonConfig", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:clientCommonConfig: ", p), err) }
    if err := p.ClientCommonConfig.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ClientCommonConfig), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:clientCommonConfig: ", p), err) }
  }
  return err
}

func (p *ClientConfig) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ClientConfig(%+v)", *p)
}

// Attributes:
//  - Appkey
//  - Topic
//  - ProducerId
type ProducerConfig struct {
  Appkey string `thrift:"appkey,1" db:"appkey" json:"appkey"`
  Topic string `thrift:"topic,2" db:"topic" json:"topic"`
  ProducerId string `thrift:"producerId,3" db:"producerId" json:"producerId"`
}

func NewProducerConfig() *ProducerConfig {
  return &ProducerConfig{}
}


func (p *ProducerConfig) GetAppkey() string {
  return p.Appkey
}

func (p *ProducerConfig) GetTopic() string {
  return p.Topic
}

func (p *ProducerConfig) GetProducerId() string {
  return p.ProducerId
}
func (p *ProducerConfig) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ProducerConfig)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Appkey = v
}
  return nil
}

func (p *ProducerConfig)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Topic = v
}
  return nil
}

func (p *ProducerConfig)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ProducerId = v
}
  return nil
}

func (p *ProducerConfig) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ProducerConfig"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ProducerConfig) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("appkey", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:appkey: ", p), err) }
  if err := oprot.WriteString(string(p.Appkey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appkey (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:appkey: ", p), err) }
  return err
}

func (p *ProducerConfig) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("topic", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:topic: ", p), err) }
  if err := oprot.WriteString(string(p.Topic)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.topic (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:topic: ", p), err) }
  return err
}

func (p *ProducerConfig) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("producerId", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:producerId: ", p), err) }
  if err := oprot.WriteString(string(p.ProducerId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.producerId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:producerId: ", p), err) }
  return err
}

func (p *ProducerConfig) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ProducerConfig(%+v)", *p)
}

// Attributes:
//  - Appkey
//  - Topic
//  - GroupName
//  - ConsumerId
//  - ManualPartitions
type ConsumerConfig struct {
  Appkey string `thrift:"appkey,1" db:"appkey" json:"appkey"`
  Topic string `thrift:"topic,2" db:"topic" json:"topic"`
  GroupName string `thrift:"groupName,3" db:"groupName" json:"groupName"`
  ConsumerId string `thrift:"consumerId,4" db:"consumerId" json:"consumerId"`
  ManualPartitions string `thrift:"manualPartitions,5" db:"manualPartitions" json:"manualPartitions"`
}

func NewConsumerConfig() *ConsumerConfig {
  return &ConsumerConfig{}
}


func (p *ConsumerConfig) GetAppkey() string {
  return p.Appkey
}

func (p *ConsumerConfig) GetTopic() string {
  return p.Topic
}

func (p *ConsumerConfig) GetGroupName() string {
  return p.GroupName
}

func (p *ConsumerConfig) GetConsumerId() string {
  return p.ConsumerId
}

func (p *ConsumerConfig) GetManualPartitions() string {
  return p.ManualPartitions
}
func (p *ConsumerConfig) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ConsumerConfig)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Appkey = v
}
  return nil
}

func (p *ConsumerConfig)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Topic = v
}
  return nil
}

func (p *ConsumerConfig)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.GroupName = v
}
  return nil
}

func (p *ConsumerConfig)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ConsumerId = v
}
  return nil
}

func (p *ConsumerConfig)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.ManualPartitions = v
}
  return nil
}

func (p *ConsumerConfig) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ConsumerConfig"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ConsumerConfig) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("appkey", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:appkey: ", p), err) }
  if err := oprot.WriteString(string(p.Appkey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appkey (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:appkey: ", p), err) }
  return err
}

func (p *ConsumerConfig) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("topic", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:topic: ", p), err) }
  if err := oprot.WriteString(string(p.Topic)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.topic (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:topic: ", p), err) }
  return err
}

func (p *ConsumerConfig) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("groupName", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:groupName: ", p), err) }
  if err := oprot.WriteString(string(p.GroupName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.groupName (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:groupName: ", p), err) }
  return err
}

func (p *ConsumerConfig) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("consumerId", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:consumerId: ", p), err) }
  if err := oprot.WriteString(string(p.ConsumerId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.consumerId (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:consumerId: ", p), err) }
  return err
}

func (p *ConsumerConfig) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("manualPartitions", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:manualPartitions: ", p), err) }
  if err := oprot.WriteString(string(p.ManualPartitions)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.manualPartitions (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:manualPartitions: ", p), err) }
  return err
}

func (p *ConsumerConfig) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ConsumerConfig(%+v)", *p)
}

// Attributes:
//  - Environment
//  - Container
//  - Cell
type ClientCommonConfig struct {
  Environment *string `thrift:"environment,1" db:"environment" json:"environment,omitempty"`
  Container *string `thrift:"container,2" db:"container" json:"container,omitempty"`
  Cell *string `thrift:"cell,3" db:"cell" json:"cell,omitempty"`
}

func NewClientCommonConfig() *ClientCommonConfig {
  return &ClientCommonConfig{}
}

var ClientCommonConfig_Environment_DEFAULT string
func (p *ClientCommonConfig) GetEnvironment() string {
  if !p.IsSetEnvironment() {
    return ClientCommonConfig_Environment_DEFAULT
  }
return *p.Environment
}
var ClientCommonConfig_Container_DEFAULT string
func (p *ClientCommonConfig) GetContainer() string {
  if !p.IsSetContainer() {
    return ClientCommonConfig_Container_DEFAULT
  }
return *p.Container
}
var ClientCommonConfig_Cell_DEFAULT string
func (p *ClientCommonConfig) GetCell() string {
  if !p.IsSetCell() {
    return ClientCommonConfig_Cell_DEFAULT
  }
return *p.Cell
}
func (p *ClientCommonConfig) IsSetEnvironment() bool {
  return p.Environment != nil
}

func (p *ClientCommonConfig) IsSetContainer() bool {
  return p.Container != nil
}

func (p *ClientCommonConfig) IsSetCell() bool {
  return p.Cell != nil
}

func (p *ClientCommonConfig) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ClientCommonConfig)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Environment = &v
}
  return nil
}

func (p *ClientCommonConfig)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Container = &v
}
  return nil
}

func (p *ClientCommonConfig)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Cell = &v
}
  return nil
}

func (p *ClientCommonConfig) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ClientCommonConfig"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ClientCommonConfig) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetEnvironment() {
    if err := oprot.WriteFieldBegin("environment", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:environment: ", p), err) }
    if err := oprot.WriteString(string(*p.Environment)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.environment (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:environment: ", p), err) }
  }
  return err
}

func (p *ClientCommonConfig) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetContainer() {
    if err := oprot.WriteFieldBegin("container", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:container: ", p), err) }
    if err := oprot.WriteString(string(*p.Container)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.container (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:container: ", p), err) }
  }
  return err
}

func (p *ClientCommonConfig) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetCell() {
    if err := oprot.WriteFieldBegin("cell", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:cell: ", p), err) }
    if err := oprot.WriteString(string(*p.Cell)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.cell (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:cell: ", p), err) }
  }
  return err
}

func (p *ClientCommonConfig) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ClientCommonConfig(%+v)", *p)
}

// Attributes:
//  - ErrorCode
//  - Version
//  - ClientResponse
type HeartBeatResponse struct {
  ErrorCode ErrorCode `thrift:"errorCode,1" db:"errorCode" json:"errorCode"`
  Version int32 `thrift:"version,2" db:"version" json:"version"`
  ClientResponse *ClientResponse `thrift:"clientResponse,3" db:"clientResponse" json:"clientResponse"`
}

func NewHeartBeatResponse() *HeartBeatResponse {
  return &HeartBeatResponse{}
}


func (p *HeartBeatResponse) GetErrorCode() ErrorCode {
  return p.ErrorCode
}

func (p *HeartBeatResponse) GetVersion() int32 {
  return p.Version
}
var HeartBeatResponse_ClientResponse_DEFAULT *ClientResponse
func (p *HeartBeatResponse) GetClientResponse() *ClientResponse {
  if !p.IsSetClientResponse() {
    return HeartBeatResponse_ClientResponse_DEFAULT
  }
return p.ClientResponse
}
func (p *HeartBeatResponse) IsSetClientResponse() bool {
  return p.ClientResponse != nil
}

func (p *HeartBeatResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *HeartBeatResponse)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ErrorCode(v)
  p.ErrorCode = temp
}
  return nil
}

func (p *HeartBeatResponse)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Version = v
}
  return nil
}

func (p *HeartBeatResponse)  ReadField3(iprot thrift.TProtocol) error {
  p.ClientResponse = &ClientResponse{}
  if err := p.ClientResponse.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ClientResponse), err)
  }
  return nil
}

func (p *HeartBeatResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("HeartBeatResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HeartBeatResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("errorCode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:errorCode: ", p), err) }
  if err := oprot.WriteI32(int32(p.ErrorCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.errorCode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:errorCode: ", p), err) }
  return err
}

func (p *HeartBeatResponse) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("version", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:version: ", p), err) }
  if err := oprot.WriteI32(int32(p.Version)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.version (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:version: ", p), err) }
  return err
}

func (p *HeartBeatResponse) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("clientResponse", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:clientResponse: ", p), err) }
  if err := p.ClientResponse.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ClientResponse), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:clientResponse: ", p), err) }
  return err
}

func (p *HeartBeatResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HeartBeatResponse(%+v)", *p)
}

// Attributes:
//  - ProducerResponse
//  - ConsumerResponse
//  - ClientCommonResponse
type ClientResponse struct {
  ProducerResponse *ProducerResponse `thrift:"producerResponse,1" db:"producerResponse" json:"producerResponse"`
  ConsumerResponse *ConsumerResponse `thrift:"consumerResponse,2" db:"consumerResponse" json:"consumerResponse"`
  ClientCommonResponse *ClientCommonResponse `thrift:"clientCommonResponse,3" db:"clientCommonResponse" json:"clientCommonResponse,omitempty"`
}

func NewClientResponse() *ClientResponse {
  return &ClientResponse{}
}

var ClientResponse_ProducerResponse_DEFAULT *ProducerResponse
func (p *ClientResponse) GetProducerResponse() *ProducerResponse {
  if !p.IsSetProducerResponse() {
    return ClientResponse_ProducerResponse_DEFAULT
  }
return p.ProducerResponse
}
var ClientResponse_ConsumerResponse_DEFAULT *ConsumerResponse
func (p *ClientResponse) GetConsumerResponse() *ConsumerResponse {
  if !p.IsSetConsumerResponse() {
    return ClientResponse_ConsumerResponse_DEFAULT
  }
return p.ConsumerResponse
}
var ClientResponse_ClientCommonResponse_DEFAULT *ClientCommonResponse
func (p *ClientResponse) GetClientCommonResponse() *ClientCommonResponse {
  if !p.IsSetClientCommonResponse() {
    return ClientResponse_ClientCommonResponse_DEFAULT
  }
return p.ClientCommonResponse
}
func (p *ClientResponse) IsSetProducerResponse() bool {
  return p.ProducerResponse != nil
}

func (p *ClientResponse) IsSetConsumerResponse() bool {
  return p.ConsumerResponse != nil
}

func (p *ClientResponse) IsSetClientCommonResponse() bool {
  return p.ClientCommonResponse != nil
}

func (p *ClientResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ClientResponse)  ReadField1(iprot thrift.TProtocol) error {
  p.ProducerResponse = &ProducerResponse{}
  if err := p.ProducerResponse.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ProducerResponse), err)
  }
  return nil
}

func (p *ClientResponse)  ReadField2(iprot thrift.TProtocol) error {
  p.ConsumerResponse = &ConsumerResponse{}
  if err := p.ConsumerResponse.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ConsumerResponse), err)
  }
  return nil
}

func (p *ClientResponse)  ReadField3(iprot thrift.TProtocol) error {
  p.ClientCommonResponse = &ClientCommonResponse{}
  if err := p.ClientCommonResponse.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ClientCommonResponse), err)
  }
  return nil
}

func (p *ClientResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ClientResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ClientResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("producerResponse", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:producerResponse: ", p), err) }
  if err := p.ProducerResponse.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ProducerResponse), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:producerResponse: ", p), err) }
  return err
}

func (p *ClientResponse) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("consumerResponse", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:consumerResponse: ", p), err) }
  if err := p.ConsumerResponse.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ConsumerResponse), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:consumerResponse: ", p), err) }
  return err
}

func (p *ClientResponse) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetClientCommonResponse() {
    if err := oprot.WriteFieldBegin("clientCommonResponse", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:clientCommonResponse: ", p), err) }
    if err := p.ClientCommonResponse.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ClientCommonResponse), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:clientCommonResponse: ", p), err) }
  }
  return err
}

func (p *ClientResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ClientResponse(%+v)", *p)
}

// Attributes:
//  - KvPair
//  - ClusterInfoPair
type ProducerResponse struct {
  KvPair map[string]string `thrift:"kvPair,1" db:"kvPair" json:"kvPair"`
  ClusterInfoPair map[string]*ProducerClusterInfo `thrift:"clusterInfoPair,2" db:"clusterInfoPair" json:"clusterInfoPair"`
}

func NewProducerResponse() *ProducerResponse {
  return &ProducerResponse{}
}


func (p *ProducerResponse) GetKvPair() map[string]string {
  return p.KvPair
}

func (p *ProducerResponse) GetClusterInfoPair() map[string]*ProducerClusterInfo {
  return p.ClusterInfoPair
}
func (p *ProducerResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ProducerResponse)  ReadField1(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.KvPair =  tMap
  for i := 0; i < size; i ++ {
var _key0 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key0 = v
}
var _val1 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val1 = v
}
    p.KvPair[_key0] = _val1
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *ProducerResponse)  ReadField2(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]*ProducerClusterInfo, size)
  p.ClusterInfoPair =  tMap
  for i := 0; i < size; i ++ {
var _key2 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key2 = v
}
    _val3 := &ProducerClusterInfo{}
    if err := _val3.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val3), err)
    }
    p.ClusterInfoPair[_key2] = _val3
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *ProducerResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ProducerResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ProducerResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("kvPair", thrift.MAP, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:kvPair: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.KvPair)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.KvPair {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:kvPair: ", p), err) }
  return err
}

func (p *ProducerResponse) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("clusterInfoPair", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:clusterInfoPair: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.ClusterInfoPair)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.ClusterInfoPair {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:clusterInfoPair: ", p), err) }
  return err
}

func (p *ProducerResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ProducerResponse(%+v)", *p)
}

// Attributes:
//  - ClusterName
//  - BrokerInfos
//  - PartitionList
type ProducerClusterInfo struct {
  ClusterName string `thrift:"clusterName,1" db:"clusterName" json:"clusterName"`
  BrokerInfos []*BrokerInfo `thrift:"brokerInfos,2" db:"brokerInfos" json:"brokerInfos"`
  PartitionList []int32 `thrift:"partitionList,3" db:"partitionList" json:"partitionList"`
}

func NewProducerClusterInfo() *ProducerClusterInfo {
  return &ProducerClusterInfo{}
}


func (p *ProducerClusterInfo) GetClusterName() string {
  return p.ClusterName
}

func (p *ProducerClusterInfo) GetBrokerInfos() []*BrokerInfo {
  return p.BrokerInfos
}

func (p *ProducerClusterInfo) GetPartitionList() []int32 {
  return p.PartitionList
}
func (p *ProducerClusterInfo) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ProducerClusterInfo)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ClusterName = v
}
  return nil
}

func (p *ProducerClusterInfo)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*BrokerInfo, 0, size)
  p.BrokerInfos =  tSlice
  for i := 0; i < size; i ++ {
    _elem4 := &BrokerInfo{}
    if err := _elem4.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem4), err)
    }
    p.BrokerInfos = append(p.BrokerInfos, _elem4)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ProducerClusterInfo)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.PartitionList =  tSlice
  for i := 0; i < size; i ++ {
var _elem5 int32
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem5 = v
}
    p.PartitionList = append(p.PartitionList, _elem5)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ProducerClusterInfo) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ProducerClusterInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ProducerClusterInfo) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("clusterName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:clusterName: ", p), err) }
  if err := oprot.WriteString(string(p.ClusterName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.clusterName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:clusterName: ", p), err) }
  return err
}

func (p *ProducerClusterInfo) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("brokerInfos", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:brokerInfos: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.BrokerInfos)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.BrokerInfos {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:brokerInfos: ", p), err) }
  return err
}

func (p *ProducerClusterInfo) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("partitionList", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:partitionList: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I32, len(p.PartitionList)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.PartitionList {
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:partitionList: ", p), err) }
  return err
}

func (p *ProducerClusterInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ProducerClusterInfo(%+v)", *p)
}

// Attributes:
//  - ID
//  - Host
//  - Port
type BrokerInfo struct {
  ID int32 `thrift:"id,1" db:"id" json:"id"`
  Host string `thrift:"host,2" db:"host" json:"host"`
  Port int32 `thrift:"port,3" db:"port" json:"port"`
}

func NewBrokerInfo() *BrokerInfo {
  return &BrokerInfo{}
}


func (p *BrokerInfo) GetID() int32 {
  return p.ID
}

func (p *BrokerInfo) GetHost() string {
  return p.Host
}

func (p *BrokerInfo) GetPort() int32 {
  return p.Port
}
func (p *BrokerInfo) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BrokerInfo)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *BrokerInfo)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Host = v
}
  return nil
}

func (p *BrokerInfo)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Port = v
}
  return nil
}

func (p *BrokerInfo) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("BrokerInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BrokerInfo) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI32(int32(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *BrokerInfo) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("host", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:host: ", p), err) }
  if err := oprot.WriteString(string(p.Host)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.host (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:host: ", p), err) }
  return err
}

func (p *BrokerInfo) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("port", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:port: ", p), err) }
  if err := oprot.WriteI32(int32(p.Port)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.port (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:port: ", p), err) }
  return err
}

func (p *BrokerInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BrokerInfo(%+v)", *p)
}

// Attributes:
//  - KvPair
//  - ClusterInfoPair
//  - PushServerInfo
type ConsumerResponse struct {
  KvPair map[string]string `thrift:"kvPair,1" db:"kvPair" json:"kvPair"`
  ClusterInfoPair map[string]*ConsumerClusterInfo `thrift:"clusterInfoPair,2" db:"clusterInfoPair" json:"clusterInfoPair"`
  PushServerInfo []*PushServerInfo `thrift:"pushServerInfo,3" db:"pushServerInfo" json:"pushServerInfo"`
}

func NewConsumerResponse() *ConsumerResponse {
  return &ConsumerResponse{}
}


func (p *ConsumerResponse) GetKvPair() map[string]string {
  return p.KvPair
}

func (p *ConsumerResponse) GetClusterInfoPair() map[string]*ConsumerClusterInfo {
  return p.ClusterInfoPair
}

func (p *ConsumerResponse) GetPushServerInfo() []*PushServerInfo {
  return p.PushServerInfo
}
func (p *ConsumerResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ConsumerResponse)  ReadField1(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.KvPair =  tMap
  for i := 0; i < size; i ++ {
var _key6 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key6 = v
}
var _val7 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val7 = v
}
    p.KvPair[_key6] = _val7
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *ConsumerResponse)  ReadField2(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]*ConsumerClusterInfo, size)
  p.ClusterInfoPair =  tMap
  for i := 0; i < size; i ++ {
var _key8 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key8 = v
}
    _val9 := &ConsumerClusterInfo{}
    if err := _val9.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val9), err)
    }
    p.ClusterInfoPair[_key8] = _val9
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *ConsumerResponse)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*PushServerInfo, 0, size)
  p.PushServerInfo =  tSlice
  for i := 0; i < size; i ++ {
    _elem10 := &PushServerInfo{}
    if err := _elem10.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem10), err)
    }
    p.PushServerInfo = append(p.PushServerInfo, _elem10)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ConsumerResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ConsumerResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ConsumerResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("kvPair", thrift.MAP, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:kvPair: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.KvPair)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.KvPair {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:kvPair: ", p), err) }
  return err
}

func (p *ConsumerResponse) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("clusterInfoPair", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:clusterInfoPair: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.ClusterInfoPair)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.ClusterInfoPair {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:clusterInfoPair: ", p), err) }
  return err
}

func (p *ConsumerResponse) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pushServerInfo", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:pushServerInfo: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.PushServerInfo)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.PushServerInfo {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:pushServerInfo: ", p), err) }
  return err
}

func (p *ConsumerResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ConsumerResponse(%+v)", *p)
}

// Attributes:
//  - ClusterName
//  - BrokerInfos
//  - PartitionAssign
type ConsumerClusterInfo struct {
  ClusterName string `thrift:"clusterName,1" db:"clusterName" json:"clusterName"`
  BrokerInfos []*BrokerInfo `thrift:"brokerInfos,2" db:"brokerInfos" json:"brokerInfos"`
  PartitionAssign *PartitionAssign `thrift:"partitionAssign,3" db:"partitionAssign" json:"partitionAssign"`
}

func NewConsumerClusterInfo() *ConsumerClusterInfo {
  return &ConsumerClusterInfo{}
}


func (p *ConsumerClusterInfo) GetClusterName() string {
  return p.ClusterName
}

func (p *ConsumerClusterInfo) GetBrokerInfos() []*BrokerInfo {
  return p.BrokerInfos
}
var ConsumerClusterInfo_PartitionAssign_DEFAULT *PartitionAssign
func (p *ConsumerClusterInfo) GetPartitionAssign() *PartitionAssign {
  if !p.IsSetPartitionAssign() {
    return ConsumerClusterInfo_PartitionAssign_DEFAULT
  }
return p.PartitionAssign
}
func (p *ConsumerClusterInfo) IsSetPartitionAssign() bool {
  return p.PartitionAssign != nil
}

func (p *ConsumerClusterInfo) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ConsumerClusterInfo)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ClusterName = v
}
  return nil
}

func (p *ConsumerClusterInfo)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*BrokerInfo, 0, size)
  p.BrokerInfos =  tSlice
  for i := 0; i < size; i ++ {
    _elem11 := &BrokerInfo{}
    if err := _elem11.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem11), err)
    }
    p.BrokerInfos = append(p.BrokerInfos, _elem11)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ConsumerClusterInfo)  ReadField3(iprot thrift.TProtocol) error {
  p.PartitionAssign = &PartitionAssign{}
  if err := p.PartitionAssign.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PartitionAssign), err)
  }
  return nil
}

func (p *ConsumerClusterInfo) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ConsumerClusterInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ConsumerClusterInfo) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("clusterName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:clusterName: ", p), err) }
  if err := oprot.WriteString(string(p.ClusterName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.clusterName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:clusterName: ", p), err) }
  return err
}

func (p *ConsumerClusterInfo) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("brokerInfos", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:brokerInfos: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.BrokerInfos)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.BrokerInfos {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:brokerInfos: ", p), err) }
  return err
}

func (p *ConsumerClusterInfo) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("partitionAssign", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:partitionAssign: ", p), err) }
  if err := p.PartitionAssign.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PartitionAssign), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:partitionAssign: ", p), err) }
  return err
}

func (p *ConsumerClusterInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ConsumerClusterInfo(%+v)", *p)
}

// Attributes:
//  - GenerationId
//  - PartitionList
type PartitionAssign struct {
  GenerationId int32 `thrift:"generationId,1" db:"generationId" json:"generationId"`
  PartitionList []int32 `thrift:"partitionList,2" db:"partitionList" json:"partitionList"`
}

func NewPartitionAssign() *PartitionAssign {
  return &PartitionAssign{}
}


func (p *PartitionAssign) GetGenerationId() int32 {
  return p.GenerationId
}

func (p *PartitionAssign) GetPartitionList() []int32 {
  return p.PartitionList
}
func (p *PartitionAssign) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PartitionAssign)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.GenerationId = v
}
  return nil
}

func (p *PartitionAssign)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.PartitionList =  tSlice
  for i := 0; i < size; i ++ {
var _elem12 int32
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem12 = v
}
    p.PartitionList = append(p.PartitionList, _elem12)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *PartitionAssign) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PartitionAssign"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PartitionAssign) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("generationId", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:generationId: ", p), err) }
  if err := oprot.WriteI32(int32(p.GenerationId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.generationId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:generationId: ", p), err) }
  return err
}

func (p *PartitionAssign) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("partitionList", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:partitionList: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I32, len(p.PartitionList)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.PartitionList {
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:partitionList: ", p), err) }
  return err
}

func (p *PartitionAssign) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PartitionAssign(%+v)", *p)
}

// Attributes:
//  - ID
//  - Hostname
//  - IP
//  - Port
//  - ThriftAppkey
type PushServerInfo struct {
  ID string `thrift:"id,1" db:"id" json:"id"`
  Hostname *string `thrift:"hostname,2" db:"hostname" json:"hostname,omitempty"`
  IP *string `thrift:"ip,3" db:"ip" json:"ip,omitempty"`
  Port *int32 `thrift:"port,4" db:"port" json:"port,omitempty"`
  ThriftAppkey *string `thrift:"thriftAppkey,5" db:"thriftAppkey" json:"thriftAppkey,omitempty"`
}

func NewPushServerInfo() *PushServerInfo {
  return &PushServerInfo{}
}


func (p *PushServerInfo) GetID() string {
  return p.ID
}
var PushServerInfo_Hostname_DEFAULT string
func (p *PushServerInfo) GetHostname() string {
  if !p.IsSetHostname() {
    return PushServerInfo_Hostname_DEFAULT
  }
return *p.Hostname
}
var PushServerInfo_IP_DEFAULT string
func (p *PushServerInfo) GetIP() string {
  if !p.IsSetIP() {
    return PushServerInfo_IP_DEFAULT
  }
return *p.IP
}
var PushServerInfo_Port_DEFAULT int32
func (p *PushServerInfo) GetPort() int32 {
  if !p.IsSetPort() {
    return PushServerInfo_Port_DEFAULT
  }
return *p.Port
}
var PushServerInfo_ThriftAppkey_DEFAULT string
func (p *PushServerInfo) GetThriftAppkey() string {
  if !p.IsSetThriftAppkey() {
    return PushServerInfo_ThriftAppkey_DEFAULT
  }
return *p.ThriftAppkey
}
func (p *PushServerInfo) IsSetHostname() bool {
  return p.Hostname != nil
}

func (p *PushServerInfo) IsSetIP() bool {
  return p.IP != nil
}

func (p *PushServerInfo) IsSetPort() bool {
  return p.Port != nil
}

func (p *PushServerInfo) IsSetThriftAppkey() bool {
  return p.ThriftAppkey != nil
}

func (p *PushServerInfo) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PushServerInfo)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *PushServerInfo)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Hostname = &v
}
  return nil
}

func (p *PushServerInfo)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.IP = &v
}
  return nil
}

func (p *PushServerInfo)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Port = &v
}
  return nil
}

func (p *PushServerInfo)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.ThriftAppkey = &v
}
  return nil
}

func (p *PushServerInfo) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PushServerInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PushServerInfo) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteString(string(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *PushServerInfo) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetHostname() {
    if err := oprot.WriteFieldBegin("hostname", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:hostname: ", p), err) }
    if err := oprot.WriteString(string(*p.Hostname)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.hostname (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:hostname: ", p), err) }
  }
  return err
}

func (p *PushServerInfo) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetIP() {
    if err := oprot.WriteFieldBegin("ip", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ip: ", p), err) }
    if err := oprot.WriteString(string(*p.IP)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.ip (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ip: ", p), err) }
  }
  return err
}

func (p *PushServerInfo) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetPort() {
    if err := oprot.WriteFieldBegin("port", thrift.I32, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:port: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Port)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.port (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:port: ", p), err) }
  }
  return err
}

func (p *PushServerInfo) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetThriftAppkey() {
    if err := oprot.WriteFieldBegin("thriftAppkey", thrift.STRING, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:thriftAppkey: ", p), err) }
    if err := oprot.WriteString(string(*p.ThriftAppkey)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.thriftAppkey (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:thriftAppkey: ", p), err) }
  }
  return err
}

func (p *PushServerInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PushServerInfo(%+v)", *p)
}

// Attributes:
//  - KvPair
type ClientCommonResponse struct {
  KvPair map[string]string `thrift:"kvPair,1" db:"kvPair" json:"kvPair"`
}

func NewClientCommonResponse() *ClientCommonResponse {
  return &ClientCommonResponse{}
}


func (p *ClientCommonResponse) GetKvPair() map[string]string {
  return p.KvPair
}
func (p *ClientCommonResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ClientCommonResponse)  ReadField1(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.KvPair =  tMap
  for i := 0; i < size; i ++ {
var _key13 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key13 = v
}
var _val14 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val14 = v
}
    p.KvPair[_key13] = _val14
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *ClientCommonResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ClientCommonResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ClientCommonResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("kvPair", thrift.MAP, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:kvPair: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.KvPair)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.KvPair {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:kvPair: ", p), err) }
  return err
}

func (p *ClientCommonResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ClientCommonResponse(%+v)", *p)
}

type Castle interface {
  // Parameters:
  //  - Request
  GetHeartBeat(ctx context.Context, request *HeartBeatRequest) (r *HeartBeatResponse, err error)
}

type CastleClient struct {
  c thrift.TClient
}

func NewCastleClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *CastleClient {
  return &CastleClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewCastleClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *CastleClient {
  return &CastleClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewCastleClient(c thrift.TClient) *CastleClient {
  return &CastleClient{
    c: c,
  }
}

func (p *CastleClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - Request
func (p *CastleClient) GetHeartBeat(ctx context.Context, request *HeartBeatRequest) (r *HeartBeatResponse, err error) {
  var _args15 CastleGetHeartBeatArgs
  _args15.Request = request
  var _result16 CastleGetHeartBeatResult
  if err = p.Client_().Call(ctx, "getHeartBeat", &_args15, &_result16); err != nil {
    return
  }
  return _result16.GetSuccess(), nil
}

type CastleProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler Castle
}

func (p *CastleProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *CastleProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *CastleProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewCastleProcessor(handler Castle) *CastleProcessor {

  self17 := &CastleProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self17.processorMap["getHeartBeat"] = &castleProcessorGetHeartBeat{handler:handler}
return self17
}

func (p *CastleProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x18 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x18.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x18

}

type castleProcessorGetHeartBeat struct {
  handler Castle
}

func (p *castleProcessorGetHeartBeat) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := CastleGetHeartBeatArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getHeartBeat", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := CastleGetHeartBeatResult{}
var retval *HeartBeatResponse
  var err2 error
  if retval, err2 = p.handler.GetHeartBeat(ctx, args.Request); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getHeartBeat: " + err2.Error())
    oprot.WriteMessageBegin("getHeartBeat", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getHeartBeat", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Request
type CastleGetHeartBeatArgs struct {
  Request *HeartBeatRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewCastleGetHeartBeatArgs() *CastleGetHeartBeatArgs {
  return &CastleGetHeartBeatArgs{}
}

var CastleGetHeartBeatArgs_Request_DEFAULT *HeartBeatRequest
func (p *CastleGetHeartBeatArgs) GetRequest() *HeartBeatRequest {
  if !p.IsSetRequest() {
    return CastleGetHeartBeatArgs_Request_DEFAULT
  }
return p.Request
}
func (p *CastleGetHeartBeatArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *CastleGetHeartBeatArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CastleGetHeartBeatArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &HeartBeatRequest{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *CastleGetHeartBeatArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getHeartBeat_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CastleGetHeartBeatArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *CastleGetHeartBeatArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CastleGetHeartBeatArgs(%+v)", *p)
}

// Attributes:
//  - Success
type CastleGetHeartBeatResult struct {
  Success *HeartBeatResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewCastleGetHeartBeatResult() *CastleGetHeartBeatResult {
  return &CastleGetHeartBeatResult{}
}

var CastleGetHeartBeatResult_Success_DEFAULT *HeartBeatResponse
func (p *CastleGetHeartBeatResult) GetSuccess() *HeartBeatResponse {
  if !p.IsSetSuccess() {
    return CastleGetHeartBeatResult_Success_DEFAULT
  }
return p.Success
}
func (p *CastleGetHeartBeatResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *CastleGetHeartBeatResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CastleGetHeartBeatResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &HeartBeatResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *CastleGetHeartBeatResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getHeartBeat_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CastleGetHeartBeatResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *CastleGetHeartBeatResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CastleGetHeartBeatResult(%+v)", *p)
}


